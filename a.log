warning: unused import: `io::sink`
 --> src/model/name.rs:1:25
  |
1 | use std::{fmt::Display, io::sink};
  |                         ^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `crate::model::name::PumpName`
 --> src/model/query_plan/query_plan_node/operation.rs:3:5
  |
3 | use crate::model::name::PumpName;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `foreign_stream_model::ForeignStreamModel`
 --> src/stream_engine/command/alter_pipeline_command.rs:6:9
  |
6 |         foreign_stream_model::ForeignStreamModel,
  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `self::alter_pump_command::AlterPumpCommand`
  --> src/stream_engine/command/alter_pipeline_command.rs:13:5
   |
13 | use self::alter_pump_command::AlterPumpCommand;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `NodeIndex`
  --> src/stream_engine/autonomous_executor/task/task_graph.rs:10:22
   |
10 |     graph::{DiGraph, NodeIndex},
   |                      ^^^^^^^^^

warning: unused imports: `Result`, `SpringError`
  --> src/stream_engine/autonomous_executor/task/task_graph.rs:15:13
   |
15 |     error::{Result, SpringError},
   |             ^^^^^^  ^^^^^^^^^^^

warning: unused import: `SpringError`
 --> src/stream_engine/autonomous_executor/task/source_task.rs:4:28
  |
4 | use crate::error::{Result, SpringError};
  |                            ^^^^^^^^^^^

warning: unused import: `crate::stream_engine::autonomous_executor::server::sink::net::NetSinkServerStandby`
 --> src/stream_engine/autonomous_executor/task/source_task.rs:6:5
  |
6 | use crate::stream_engine::autonomous_executor::server::sink::net::NetSinkServerStandby;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `server::source::net::NetSourceServerActive`
   --> src/stream_engine/autonomous_executor/task/source_task.rs:114:17
    |
114 |                 server::source::net::NetSourceServerActive,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `collections::HashMap`, `rc::Rc`
 --> src/stream_engine/autonomous_executor/data/foreign_row/foreign_sink_row.rs:1:11
  |
1 | use std::{collections::HashMap, rc::Rc};
  |           ^^^^^^^^^^^^^^^^^^^^  ^^^^^^

warning: unused imports: `column::stream_column::StreamColumns`, `error::Result`, `pipeline::stream_model::stream_shape::StreamShape`
 --> src/stream_engine/autonomous_executor/data/foreign_row/foreign_sink_row.rs:4:5
  |
4 |     error::Result,
  |     ^^^^^^^^^^^^^
5 |     stream_engine::{
6 |         autonomous_executor::data::{column::stream_column::StreamColumns, row::Row},
  |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
7 |         pipeline::stream_model::stream_shape::StreamShape,
  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::rc::Rc`
 --> src/stream_engine/autonomous_executor/data/row/repository/naive_row_repository.rs:2:5
  |
2 | use std::rc::Rc;
  |     ^^^^^^^^^^^

warning: unused import: `rc::Rc`
 --> src/stream_engine/autonomous_executor/data/row/repository.rs:3:11
  |
3 | use std::{rc::Rc, sync::Arc};
  |           ^^^^^^

warning: unused import: `model::name::PumpName`
 --> src/stream_engine/autonomous_executor/data/row/repository.rs:9:20
  |
9 |     error::Result, model::name::PumpName, stream_engine::autonomous_executor::task::task_id::TaskId,
  |                    ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::rc::Rc`
 --> src/stream_engine/autonomous_executor/exec/query_executor.rs:1:5
  |
1 | use std::rc::Rc;
  |     ^^^^^^^^^^^

warning: unused import: `rc::Rc`
 --> src/stream_engine/autonomous_executor/exec/query_executor/final_row.rs:1:11
  |
1 | use std::{rc::Rc, sync::Arc};
  |           ^^^^^^

warning: unused import: `rc::Rc`
 --> src/stream_engine/autonomous_executor/exec/query_executor/interm_row.rs:1:11
  |
1 | use std::{rc::Rc, sync::Arc};
  |           ^^^^^^

warning: unused import: `std::rc::Rc`
 --> src/stream_engine/autonomous_executor/exec/query_executor/node_executor_tree/node_executor/collect_executor.rs:1:5
  |
1 | use std::rc::Rc;
  |     ^^^^^^^^^^^

warning: unused import: `crate::model::name::PumpName`
 --> src/stream_engine/autonomous_executor/exec/query_executor/node_executor_tree/node_executor/collect_executor.rs:5:5
  |
5 | use crate::model::name::PumpName;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `rc::Rc`
  --> src/stream_engine/autonomous_executor/exec/query_executor/node_executor_tree/node_executor/window_executor.rs:10:34
   |
10 | use std::{collections::VecDeque, rc::Rc, sync::Arc};
   |                                  ^^^^^^

warning: unused import: `crate::stream_engine::dependency_injection::DependencyInjection`
 --> src/stream_engine/autonomous_executor/exec/query_executor/node_executor_tree/node_executor.rs:6:5
  |
6 | use crate::stream_engine::dependency_injection::DependencyInjection;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `self`, `task_graph::TaskGraph`
  --> src/stream_engine/autonomous_executor/exec/query_executor.rs:75:25
   |
75 |             data::row::{self, Row},
   |                         ^^^^
76 |             task::{task_graph::TaskGraph, task_id::TaskId},
   |                    ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `IpAddr`
 --> src/stream_engine/autonomous_executor/server/source/net.rs:3:11
  |
3 |     net::{IpAddr, SocketAddr, TcpStream},
  |           ^^^^^^

warning: unused imports: `pipeline_graph::edge::Edge`, `self`, `server::source`
   --> src/stream_engine/autonomous_executor/scheduler/flow_efficient_scheduler.rs:111:13
    |
111 |             server::source,
    |             ^^^^^^^^^^^^^^
112 |             task::{
113 |                 task_graph::{self, TaskGraph},
    |                              ^^^^
...
119 |         pipeline::{pipeline_graph::edge::Edge, pipeline_version::PipelineVersion},
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Mutex`
 --> src/stream_engine/autonomous_executor/worker_pool/worker.rs:7:23
  |
7 |     sync::{mpsc, Arc, Mutex},
  |                       ^^^^^

warning: unused import: `Mutex`
 --> src/stream_engine/autonomous_executor/worker_pool.rs:3:22
  |
3 | use std::sync::{Arc, Mutex};
  |                      ^^^^^

warning: unused import: `rc::Rc`
 --> src/stream_engine/autonomous_executor/test_support/factory.rs:1:11
  |
1 | use std::{rc::Rc, sync::Arc};
  |           ^^^^^^

warning: unused import: `pipeline::stream_model::StreamModel`
  --> src/stream_engine/autonomous_executor/test_support/factory.rs:33:9
   |
33 |         pipeline::stream_model::StreamModel,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `alter_pump_command::AlterPumpCommand`, `task_id::TaskId`
  --> src/stream_engine/autonomous_executor/test_support/fixture.rs:23:43
   |
23 |             task::{task_graph::TaskGraph, task_id::TaskId},
   |                                           ^^^^^^^^^^^^^^^
...
27 |             alter_pump_command::AlterPumpCommand, AlterPipelineCommand,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `stream_engine::autonomous_executor::task::Task`
 --> src/stream_engine/pipeline/pump_model.rs:5:5
  |
5 |     stream_engine::autonomous_executor::task::Task,
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `name::StreamName`
 --> src/stream_engine/pipeline/server_model.rs:7:20
  |
7 | use crate::model::{name::StreamName, option::Options};
  |                    ^^^^^^^^^^^^^^^^

warning: unused import: `stream_model::StreamModel`
  --> src/stream_engine/pipeline/server_model.rs:11:55
   |
11 | use super::{foreign_stream_model::ForeignStreamModel, stream_model::StreamModel};
   |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `autonomous_executor::task::Task`
 --> src/stream_engine/pipeline/pipeline_graph/edge.rs:4:5
  |
4 |     autonomous_executor::task::Task,
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `dependency_injection::DependencyInjection`, `self`
 --> src/stream_engine/reactive_executor.rs:3:5
  |
3 |     dependency_injection::DependencyInjection,
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
4 |     pipeline::{
5 |         self,
  |         ^^^^

warning: unused import: `NaiveRowRepository`
  --> src/stream_engine.rs:24:45
   |
24 | use autonomous_executor::{CurrentTimestamp, NaiveRowRepository, RowRepository, Scheduler};
   |                                             ^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::model::name::PumpName`
 --> src/api/error.rs:7:5
  |
7 | use crate::model::name::PumpName;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `IntoEdgeReferences`
  --> src/stream_engine/autonomous_executor/task/task_graph.rs:11:22
   |
11 |     visit::{EdgeRef, IntoEdgeReferences, IntoEdgesDirected},
   |                      ^^^^^^^^^^^^^^^^^^

warning: unused import: `IntoEdgesDirected`
  --> src/stream_engine/autonomous_executor/task/task_graph.rs:11:42
   |
11 |     visit::{EdgeRef, IntoEdgeReferences, IntoEdgesDirected},
   |                                          ^^^^^^^^^^^^^^^^^

warning: unused import: `crate::stream_engine::autonomous_executor::server::sink::SinkServerStandby`
 --> src/stream_engine/autonomous_executor/task/source_task.rs:7:5
  |
7 | use crate::stream_engine::autonomous_executor::server::sink::SinkServerStandby;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `IntoEdgesDirected`
   --> src/stream_engine/autonomous_executor/scheduler/flow_efficient_scheduler.rs:103:22
    |
103 |     visit::{EdgeRef, IntoEdgesDirected},
    |                      ^^^^^^^^^^^^^^^^^

warning: unused import: `IntoEdgeReferences`
  --> src/stream_engine/pipeline/pipeline_graph.rs:11:22
   |
11 |     visit::{EdgeRef, IntoEdgeReferences},
   |                      ^^^^^^^^^^^^^^^^^^

warning: unused variable: `latest_new_row`
  --> src/stream_engine/autonomous_executor/exec/query_executor/node_executor_tree.rs:68:9
   |
68 |         latest_new_row: &mut Option<NewRow>,
   |         ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_latest_new_row`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `state`
  --> src/stream_engine/reactive_executor.rs:56:59
   |
56 |     fn alter_pump(mut pipeline: Pipeline, name: PumpName, state: PumpState) -> Result<Pipeline> {
   |                                                           ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`

warning: unused variable: `pipeline`
  --> src/api/low_level_rs.rs:83:23
   |
83 | pub fn spring_prepare(pipeline: &mut SpringPipeline, sql: &str) -> Result<SpringStatement> {
   |                       ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_pipeline`

warning: unused variable: `sql`
  --> src/api/low_level_rs.rs:83:54
   |
83 | pub fn spring_prepare(pipeline: &mut SpringPipeline, sql: &str) -> Result<SpringStatement> {
   |                                                      ^^^ help: if this is intentional, prefix it with an underscore: `_sql`

warning: unused variable: `stmt`
   --> src/api/low_level_rs.rs:100:20
    |
100 | pub fn spring_step(stmt: &mut SpringStatement) -> Result<SpringStepSuccess> {
    |                    ^^^^ help: if this is intentional, prefix it with an underscore: `_stmt`

warning: unused variable: `stmt`
   --> src/api/low_level_rs.rs:112:26
    |
112 | pub fn spring_column_i32(stmt: &mut SpringStatement, i_col: usize) -> Result<i32> {
    |                          ^^^^ help: if this is intentional, prefix it with an underscore: `_stmt`

warning: unused variable: `i_col`
   --> src/api/low_level_rs.rs:112:54
    |
112 | pub fn spring_column_i32(stmt: &mut SpringStatement, i_col: usize) -> Result<i32> {
    |                                                      ^^^^^ help: if this is intentional, prefix it with an underscore: `_i_col`

warning: unused variable: `stmt`
   --> src/api/low_level_rs.rs:121:27
    |
121 | pub fn spring_column_text(stmt: &mut SpringStatement, i_col: usize) -> Result<String> {
    |                           ^^^^ help: if this is intentional, prefix it with an underscore: `_stmt`

warning: unused variable: `i_col`
   --> src/api/low_level_rs.rs:121:55
    |
121 | pub fn spring_column_text(stmt: &mut SpringStatement, i_col: usize) -> Result<String> {
    |                                                       ^^^^^ help: if this is intentional, prefix it with an underscore: `_i_col`

warning: unused variable: `stmt`
   --> src/api/low_level_rs.rs:128:24
    |
128 | pub fn spring_finalize(stmt: SpringStatement) {
    |                        ^^^^ help: if this is intentional, prefix it with an underscore: `_stmt`

warning: unused variable: `pipeline`
   --> src/api/low_level_rs.rs:135:21
    |
135 | pub fn spring_close(pipeline: SpringPipeline) {
    |                     ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_pipeline`

warning: variant is never constructed: `Start`
 --> src/stream_engine/command/alter_pipeline_command/alter_pump_command.rs:5:5
  |
5 |     Start(PumpName),
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: variant is never constructed: `Stop`
 --> src/stream_engine/command/alter_pipeline_command/alter_pump_command.rs:6:5
  |
6 |     Stop(PumpName),
  |     ^^^^^^^^^^^^^^

warning: variant is never constructed: `CreateStream`
  --> src/stream_engine/command/alter_pipeline_command.rs:17:5
   |
17 |     CreateStream(StreamModel),
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: associated function is never used: `stream`
  --> src/stream_engine/autonomous_executor/data/column/stream_column.rs:53:58
   |
53 |     pub(in crate::stream_engine::autonomous_executor) fn stream(&self) -> &StreamShape {
   |                                                          ^^^^^^

warning: associated function is never used: `negate`
   --> src/stream_engine/autonomous_executor/data/value/sql_value/nn_sql_value.rs:206:19
    |
206 |     pub(crate) fn negate(self) -> Result<Self> {
    |                   ^^^^^^

warning: associated function is never used: `to_bool`
   --> src/stream_engine/autonomous_executor/data/value/sql_value.rs:112:12
    |
112 |     pub fn to_bool(&self) -> Result<bool> {
    |            ^^^^^^^

warning: variant is never constructed: `Stream`
  --> src/stream_engine/autonomous_executor/exec/query_executor/node_executor_tree/node_executor.rs:13:5
   |
13 |     Stream(StreamNodeExecutor),
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: variant is never constructed: `Window`
  --> src/stream_engine/autonomous_executor/exec/query_executor/node_executor_tree/node_executor.rs:14:5
   |
14 |     Window(WindowNodeExecutor),
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: variant is never constructed: `Sliding`
  --> src/stream_engine/autonomous_executor/exec/query_executor/node_executor_tree/node_executor.rs:27:5
   |
27 |     Sliding(SlidingWindowExecutor),
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: variant is never constructed: `Tcp`
  --> src/stream_engine/autonomous_executor/server/source/net.rs:25:5
   |
25 |     Tcp,
   |     ^^^

warning: unused `std::result::Result` that must be used
  --> src/stream_engine.rs:64:9
   |
64 |         self.autonomous_executor.notify_pipeline_update(pipeline);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_must_use)]` on by default
   = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` that must be used
   --> src/stream_engine/autonomous_executor/scheduler/flow_efficient_scheduler.rs:326:9
    |
326 |         scheduler.notify_pipeline_update(pipeline);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled

warning: `springql-core` (lib test) generated 64 warnings
    Finished test [unoptimized + debuginfo] target(s) in 0.02s
     Running unittests (target/debug/deps/springql_core-dbf7107c55a7d33b)

running 1 test
[2021-11-03T04:11:45Z INFO  springql_core::test_support::setup] setup_test_logger(): done
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::worker_pool::worker] [Worker#0] Started
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::worker_pool::worker] [Worker#1] Started
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine] [StreamEngine] alter_pipeline(CreateForeignStream(ServerModel { server_type: SourceNet, serving_foreign_stream: ForeignStreamModel(StreamModel { name: StreamName("fst_trade_source"), shape: StreamShape { cols: [ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("timestamp"), sql_type: TimestampComparable, nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("ticker"), sql_type: StringComparableLoose(Text), nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("amount"), sql_type: NumericComparable(I64Loose(SmallInt)), nullable: false } }], promoted_rowtime: Some(ColumnName("timestamp")) }, options: Options({}) }), options: Options({"REMOTE_PORT": "64529", "PROTOCOL": "TCP", "REMOTE_HOST": "127.0.0.1"}) }))
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::data::row::repository] [RowRepository] reset([])
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::scheduler::flow_efficient_scheduler] [FlowEfficientScheduler] new schedule []; from task graph TaskGraph(Graph { Ty: "Directed", node_count: 2, edge_count: 1, edges: (0, 1), node weights: {0: StreamName("__st_virtual_root__"), 1: StreamName("fst_trade_source")}, edge weights: {0: Source(RwLock { data: SourceTask { id: TaskId("task-SourceServerTo-fst_trade_source"), server_model: ServerModel { server_type: SourceNet, serving_foreign_stream: ForeignStreamModel(StreamModel { name: StreamName("fst_trade_source"), shape: StreamShape { cols: [ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("timestamp"), sql_type: TimestampComparable, nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("ticker"), sql_type: StringComparableLoose(Text), nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("amount"), sql_type: NumericComparable(I64Loose(SmallInt)), nullable: false } }], promoted_rowtime: Some(ColumnName("timestamp")) }, options: Options({}) }), options: Options({"REMOTE_PORT": "64529", "PROTOCOL": "TCP", "REMOTE_HOST": "127.0.0.1"}) }, state: Stopped, downstream: ForeignStreamModel(StreamModel { name: StreamName("fst_trade_source"), shape: StreamShape { cols: [ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("timestamp"), sql_type: TimestampComparable, nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("ticker"), sql_type: StringComparableLoose(Text), nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("amount"), sql_type: NumericComparable(I64Loose(SmallInt)), nullable: false } }], promoted_rowtime: Some(ColumnName("timestamp")) }, options: Options({}) }) }, poisoned: false, .. })} })
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine] [StreamEngine] alter_pipeline(CreateForeignStream(ServerModel { server_type: SinkNet, serving_foreign_stream: ForeignStreamModel(StreamModel { name: StreamName("fst_trade_sink"), shape: StreamShape { cols: [ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("timestamp"), sql_type: TimestampComparable, nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("ticker"), sql_type: StringComparableLoose(Text), nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("amount"), sql_type: NumericComparable(I64Loose(SmallInt)), nullable: false } }], promoted_rowtime: Some(ColumnName("timestamp")) }, options: Options({}) }), options: Options({"REMOTE_HOST": "127.0.0.1", "REMOTE_PORT": "64530", "PROTOCOL": "TCP"}) }))
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::data::row::repository] [RowRepository] reset([TaskId("task-SourceServerTo-fst_trade_source")])
[2021-11-03T04:11:45Z INFO  springql_core::stream_engine::autonomous_executor::test_support::foreign::sink] [TestSink] Connection from 127.0.0.1:64531
[2021-11-03T04:11:45Z INFO  springql_core::stream_engine::autonomous_executor::test_support::foreign::sink] [TestSink] waiting for next row message...
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::scheduler::flow_efficient_scheduler] [FlowEfficientScheduler] new schedule [task-SinkServerFrom-fst_trade_sink]; from task graph TaskGraph(Graph { Ty: "Directed", node_count: 4, edge_count: 2, edges: (0, 1), (2, 3), node weights: {0: StreamName("__st_virtual_root__"), 1: StreamName("fst_trade_source"), 2: StreamName("fst_trade_sink"), 3: StreamName("__st_virtual_leaf__fst_trade_sink__")}, edge weights: {0: Source(RwLock { data: SourceTask { id: TaskId("task-SourceServerTo-fst_trade_source"), server_model: ServerModel { server_type: SourceNet, serving_foreign_stream: ForeignStreamModel(StreamModel { name: StreamName("fst_trade_source"), shape: StreamShape { cols: [ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("timestamp"), sql_type: TimestampComparable, nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("ticker"), sql_type: StringComparableLoose(Text), nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("amount"), sql_type: NumericComparable(I64Loose(SmallInt)), nullable: false } }], promoted_rowtime: Some(ColumnName("timestamp")) }, options: Options({}) }), options: Options({"REMOTE_PORT": "64529", "PROTOCOL": "TCP", "REMOTE_HOST": "127.0.0.1"}) }, state: Stopped, downstream: ForeignStreamModel(StreamModel { name: StreamName("fst_trade_source"), shape: StreamShape { cols: [ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("timestamp"), sql_type: TimestampComparable, nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("ticker"), sql_type: StringComparableLoose(Text), nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("amount"), sql_type: NumericComparable(I64Loose(SmallInt)), nullable: false } }], promoted_rowtime: Some(ColumnName("timestamp")) }, options: Options({}) }) }, poisoned: false, .. }), 1: Sink(SinkTask { id: TaskId("task-SinkServerFrom-fst_trade_sink"), state: Stopped, downstream_server: Mutex { data: NetSinkServerActive { foreign_addr: 127.0.0.1:64530, tcp_stream_writer: BufWriter { writer: TcpStream { addr: 127.0.0.1:64531, peer: 127.0.0.1:64530, fd: 5 }, buffer: 0/8192 } }, poisoned: false, .. } })} })
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::worker_pool::worker] [Worker#0] Scheduled task:task-SinkServerFrom-fst_trade_sink
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::worker_pool::worker] [Worker#1] Scheduled task:task-SinkServerFrom-fst_trade_sink
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine] [StreamEngine] alter_pipeline(CreatePump(PumpModel { name: PumpName("pu_trade_source_p1"), state: Stopped, upstream: StreamName("fst_trade_source"), downstream: StreamName("fst_trade_sink") }))
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::data::row::repository] [RowRepository] collect_next(TaskId("task-SinkServerFrom-fst_trade_sink"))
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::data::row::repository] [RowRepository] collect_next(TaskId("task-SinkServerFrom-fst_trade_sink"))
[2021-11-03T04:11:45Z TRACE springql_core::stream_engine::autonomous_executor::worker_pool::worker] InputTimeout { task_name: "task-SinkServerFrom-fst_trade_sink", source: task (TaskId("task-SinkServerFrom-fst_trade_sink")) has not yet registered to the RowRepository internal }
[2021-11-03T04:11:45Z TRACE springql_core::stream_engine::autonomous_executor::worker_pool::worker] InputTimeout { task_name: "task-SinkServerFrom-fst_trade_sink", source: task (TaskId("task-SinkServerFrom-fst_trade_sink")) has not yet registered to the RowRepository internal }
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::data::row::repository] [RowRepository] reset([TaskId("task-SourceServerTo-fst_trade_source"), TaskId("task-SinkServerFrom-fst_trade_sink")])
[2021-11-03T04:11:45Z INFO  springql_core::stream_engine::autonomous_executor::test_support::foreign::sink] [TestSink] Got EOF. Stop stream_handler.
[2021-11-03T04:11:45Z INFO  springql_core::stream_engine::autonomous_executor::test_support::foreign::sink] [TestSink] Connection from 127.0.0.1:64532
[2021-11-03T04:11:45Z INFO  springql_core::stream_engine::autonomous_executor::test_support::foreign::sink] [TestSink] waiting for next row message...
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::scheduler::flow_efficient_scheduler] [FlowEfficientScheduler] new schedule []; from task graph TaskGraph(Graph { Ty: "Directed", node_count: 4, edge_count: 3, edges: (0, 1), (2, 3), (1, 2), node weights: {0: StreamName("__st_virtual_root__"), 1: StreamName("fst_trade_source"), 2: StreamName("fst_trade_sink"), 3: StreamName("__st_virtual_leaf__fst_trade_sink__")}, edge weights: {0: Source(RwLock { data: SourceTask { id: TaskId("task-SourceServerTo-fst_trade_source"), server_model: ServerModel { server_type: SourceNet, serving_foreign_stream: ForeignStreamModel(StreamModel { name: StreamName("fst_trade_source"), shape: StreamShape { cols: [ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("timestamp"), sql_type: TimestampComparable, nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("ticker"), sql_type: StringComparableLoose(Text), nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("amount"), sql_type: NumericComparable(I64Loose(SmallInt)), nullable: false } }], promoted_rowtime: Some(ColumnName("timestamp")) }, options: Options({}) }), options: Options({"REMOTE_PORT": "64529", "PROTOCOL": "TCP", "REMOTE_HOST": "127.0.0.1"}) }, state: Stopped, downstream: ForeignStreamModel(StreamModel { name: StreamName("fst_trade_source"), shape: StreamShape { cols: [ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("timestamp"), sql_type: TimestampComparable, nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("ticker"), sql_type: StringComparableLoose(Text), nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("amount"), sql_type: NumericComparable(I64Loose(SmallInt)), nullable: false } }], promoted_rowtime: Some(ColumnName("timestamp")) }, options: Options({}) }) }, poisoned: false, .. }), 1: Sink(SinkTask { id: TaskId("task-SinkServerFrom-fst_trade_sink"), state: Stopped, downstream_server: Mutex { data: NetSinkServerActive { foreign_addr: 127.0.0.1:64530, tcp_stream_writer: BufWriter { writer: TcpStream { addr: 127.0.0.1:64532, peer: 127.0.0.1:64530, fd: 7 }, buffer: 0/8192 } }, poisoned: false, .. } }), 2: Pump(PumpTask { id: TaskId("task-Pump-pu_trade_source_p1"), state: Stopped })} })
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine] [StreamEngine] alter_pipeline(AlterPump { name: PumpName("pu_trade_source_p1"), state: Started })
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::data::row::repository] [RowRepository] reset([TaskId("task-SourceServerTo-fst_trade_source"), TaskId("task-SinkServerFrom-fst_trade_sink"), TaskId("task-Pump-pu_trade_source_p1")])
[2021-11-03T04:11:45Z INFO  springql_core::stream_engine::autonomous_executor::test_support::foreign::sink] [TestSink] Got EOF. Stop stream_handler.
[2021-11-03T04:11:45Z INFO  springql_core::stream_engine::autonomous_executor::test_support::foreign::sink] [TestSink] Connection from 127.0.0.1:64533
[2021-11-03T04:11:45Z INFO  springql_core::stream_engine::autonomous_executor::server::source::net] [NetSourceServerActive] Ready to read from 127.0.0.1:64529
[2021-11-03T04:11:45Z INFO  springql_core::stream_engine::autonomous_executor::test_support::foreign::sink] [TestSink] waiting for next row message...
[2021-11-03T04:11:45Z INFO  springql_core::stream_engine::autonomous_executor::test_support::foreign::source] [TestSource] Connection from 127.0.0.1:64534
[2021-11-03T04:11:45Z INFO  springql_core::stream_engine::autonomous_executor::test_support::foreign::source] [TestSource] Sent: {"amount":20,"ticker":"ORCL","timestamp":"2021-01-01 13:00:00.000000001"}
    
[2021-11-03T04:11:45Z INFO  springql_core::stream_engine::autonomous_executor::test_support::foreign::source] [TestSource] Sent: {"amount":30,"ticker":"IBM","timestamp":"2021-01-01 13:00:00.000000002"}
    
[2021-11-03T04:11:45Z INFO  springql_core::stream_engine::autonomous_executor::test_support::foreign::source] [TestSource] Sent: {"amount":100,"ticker":"GOOGL","timestamp":"2021-01-01 13:00:00.000000003"}
    
[2021-11-03T04:11:45Z INFO  springql_core::stream_engine::autonomous_executor::test_support::foreign::source] [TestSource] No message left. Wait forever...
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::scheduler::flow_efficient_scheduler] [FlowEfficientScheduler] new schedule [task-SourceServerTo-fst_trade_source, task-Pump-pu_trade_source_p1, task-SinkServerFrom-fst_trade_sink]; from task graph TaskGraph(Graph { Ty: "Directed", node_count: 4, edge_count: 3, edges: (0, 1), (2, 3), (1, 2), node weights: {0: StreamName("__st_virtual_root__"), 1: StreamName("fst_trade_source"), 2: StreamName("fst_trade_sink"), 3: StreamName("__st_virtual_leaf__fst_trade_sink__")}, edge weights: {0: Source(RwLock { data: SourceTask { id: TaskId("task-SourceServerTo-fst_trade_source"), server_model: ServerModel { server_type: SourceNet, serving_foreign_stream: ForeignStreamModel(StreamModel { name: StreamName("fst_trade_source"), shape: StreamShape { cols: [ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("timestamp"), sql_type: TimestampComparable, nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("ticker"), sql_type: StringComparableLoose(Text), nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("amount"), sql_type: NumericComparable(I64Loose(SmallInt)), nullable: false } }], promoted_rowtime: Some(ColumnName("timestamp")) }, options: Options({}) }), options: Options({"REMOTE_PORT": "64529", "PROTOCOL": "TCP", "REMOTE_HOST": "127.0.0.1"}) }, state: Started { upstream_server: Mutex { data: NetSourceServerActive { foreign_addr: 127.0.0.1:64529, tcp_stream_reader: BufReader { reader: TcpStream { addr: 127.0.0.1:64534, peer: 127.0.0.1:64529, fd: 7 }, buffer: 0/8192 } }, poisoned: false, .. } }, downstream: ForeignStreamModel(StreamModel { name: StreamName("fst_trade_source"), shape: StreamShape { cols: [ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("timestamp"), sql_type: TimestampComparable, nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("ticker"), sql_type: StringComparableLoose(Text), nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("amount"), sql_type: NumericComparable(I64Loose(SmallInt)), nullable: false } }], promoted_rowtime: Some(ColumnName("timestamp")) }, options: Options({}) }) }, poisoned: false, .. }), 1: Sink(SinkTask { id: TaskId("task-SinkServerFrom-fst_trade_sink"), state: Stopped, downstream_server: Mutex { data: NetSinkServerActive { foreign_addr: 127.0.0.1:64530, tcp_stream_writer: BufWriter { writer: TcpStream { addr: 127.0.0.1:64533, peer: 127.0.0.1:64530, fd: 6 }, buffer: 0/8192 } }, poisoned: false, .. } }), 2: Pump(PumpTask { id: TaskId("task-Pump-pu_trade_source_p1"), state: Started })} })
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::worker_pool::worker] [Worker#0] Scheduled task:task-SourceServerTo-fst_trade_source
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::worker_pool::worker] [Worker#1] Scheduled task:task-SourceServerTo-fst_trade_source
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::data::row::repository] [RowRepository] emit_owned(Row { arrival_rowtime: None, cols: StreamColumns { stream_shape: StreamShape { cols: [ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("timestamp"), sql_type: TimestampComparable, nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("ticker"), sql_type: StringComparableLoose(Text), nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("amount"), sql_type: NumericComparable(I64Loose(SmallInt)), nullable: false } }], promoted_rowtime: Some(ColumnName("timestamp")) }, values: [NotNull(Timestamp(Timestamp(2021-01-01T13:00:00.000000002))), NotNull(Text("IBM")), NotNull(SmallInt(30))] } }, [TaskId("task-Pump-pu_trade_source_p1")])
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::data::row::repository] [RowRepository] emit_owned(Row { arrival_rowtime: None, cols: StreamColumns { stream_shape: StreamShape { cols: [ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("timestamp"), sql_type: TimestampComparable, nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("ticker"), sql_type: StringComparableLoose(Text), nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("amount"), sql_type: NumericComparable(I64Loose(SmallInt)), nullable: false } }], promoted_rowtime: Some(ColumnName("timestamp")) }, values: [NotNull(Timestamp(Timestamp(2021-01-01T13:00:00.000000001))), NotNull(Text("ORCL")), NotNull(SmallInt(20))] } }, [TaskId("task-Pump-pu_trade_source_p1")])
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::data::row::repository] [RowRepository] emit(Row { arrival_rowtime: None, cols: StreamColumns { stream_shape: StreamShape { cols: [ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("timestamp"), sql_type: TimestampComparable, nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("ticker"), sql_type: StringComparableLoose(Text), nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("amount"), sql_type: NumericComparable(I64Loose(SmallInt)), nullable: false } }], promoted_rowtime: Some(ColumnName("timestamp")) }, values: [NotNull(Timestamp(Timestamp(2021-01-01T13:00:00.000000002))), NotNull(Text("IBM")), NotNull(SmallInt(30))] } }, [TaskId("task-Pump-pu_trade_source_p1")])
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::data::row::repository] [RowRepository] emit(Row { arrival_rowtime: None, cols: StreamColumns { stream_shape: StreamShape { cols: [ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("timestamp"), sql_type: TimestampComparable, nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("ticker"), sql_type: StringComparableLoose(Text), nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("amount"), sql_type: NumericComparable(I64Loose(SmallInt)), nullable: false } }], promoted_rowtime: Some(ColumnName("timestamp")) }, values: [NotNull(Timestamp(Timestamp(2021-01-01T13:00:00.000000001))), NotNull(Text("ORCL")), NotNull(SmallInt(20))] } }, [TaskId("task-Pump-pu_trade_source_p1")])
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::worker_pool::worker] [Worker#1] Scheduled task:task-Pump-pu_trade_source_p1
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::worker_pool::worker] [Worker#0] Scheduled task:task-Pump-pu_trade_source_p1
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::data::row::repository] [RowRepository] collect_next(TaskId("task-Pump-pu_trade_source_p1"))
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::data::row::repository] [RowRepository] collect_next(TaskId("task-Pump-pu_trade_source_p1"))
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::data::row::repository] [RowRepository] emit(Row { arrival_rowtime: None, cols: StreamColumns { stream_shape: StreamShape { cols: [ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("timestamp"), sql_type: TimestampComparable, nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("ticker"), sql_type: StringComparableLoose(Text), nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("amount"), sql_type: NumericComparable(I64Loose(SmallInt)), nullable: false } }], promoted_rowtime: Some(ColumnName("timestamp")) }, values: [NotNull(Timestamp(Timestamp(2021-01-01T13:00:00.000000002))), NotNull(Text("IBM")), NotNull(SmallInt(30))] } }, [TaskId("task-SinkServerFrom-fst_trade_sink")])
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::data::row::repository] [RowRepository] emit(Row { arrival_rowtime: None, cols: StreamColumns { stream_shape: StreamShape { cols: [ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("timestamp"), sql_type: TimestampComparable, nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("ticker"), sql_type: StringComparableLoose(Text), nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("amount"), sql_type: NumericComparable(I64Loose(SmallInt)), nullable: false } }], promoted_rowtime: Some(ColumnName("timestamp")) }, values: [NotNull(Timestamp(Timestamp(2021-01-01T13:00:00.000000001))), NotNull(Text("ORCL")), NotNull(SmallInt(20))] } }, [TaskId("task-SinkServerFrom-fst_trade_sink")])
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::worker_pool::worker] [Worker#1] Scheduled task:task-SinkServerFrom-fst_trade_sink
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::worker_pool::worker] [Worker#0] Scheduled task:task-SinkServerFrom-fst_trade_sink
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::data::row::repository] [RowRepository] collect_next(TaskId("task-SinkServerFrom-fst_trade_sink"))
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::data::row::repository] [RowRepository] collect_next(TaskId("task-SinkServerFrom-fst_trade_sink"))
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::worker_pool::worker] [Worker#1] Scheduled task:task-SourceServerTo-fst_trade_source
[2021-11-03T04:11:45Z INFO  springql_core::stream_engine::autonomous_executor::test_support::foreign::sink] [TestSink] read: {"amount":30,"ticker":"IBM","timestamp":"2021-01-01 13:00:00.000000002"}
    
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::worker_pool::worker] [Worker#0] Scheduled task:task-SourceServerTo-fst_trade_source
[2021-11-03T04:11:45Z INFO  springql_core::stream_engine::autonomous_executor::test_support::foreign::sink] [TestSink] waiting for next row message...
[2021-11-03T04:11:45Z INFO  springql_core::stream_engine::autonomous_executor::test_support::foreign::sink] [TestSink] read: {"amount":20,"ticker":"ORCL","timestamp":"2021-01-01 13:00:00.000000001"}
    
[2021-11-03T04:11:45Z INFO  springql_core::stream_engine::autonomous_executor::test_support::foreign::sink] [TestSink] waiting for next row message...
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::data::row::repository] [RowRepository] emit_owned(Row { arrival_rowtime: None, cols: StreamColumns { stream_shape: StreamShape { cols: [ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("timestamp"), sql_type: TimestampComparable, nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("ticker"), sql_type: StringComparableLoose(Text), nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("amount"), sql_type: NumericComparable(I64Loose(SmallInt)), nullable: false } }], promoted_rowtime: Some(ColumnName("timestamp")) }, values: [NotNull(Timestamp(Timestamp(2021-01-01T13:00:00.000000003))), NotNull(Text("GOOGL")), NotNull(SmallInt(100))] } }, [TaskId("task-Pump-pu_trade_source_p1")])
[2021-11-03T04:11:45Z DEBUG springql_core::stream_engine::autonomous_executor::data::row::repository] [RowRepository] emit(Row { arrival_rowtime: None, cols: StreamColumns { stream_shape: StreamShape { cols: [ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("timestamp"), sql_type: TimestampComparable, nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("ticker"), sql_type: StringComparableLoose(Text), nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("amount"), sql_type: NumericComparable(I64Loose(SmallInt)), nullable: false } }], promoted_rowtime: Some(ColumnName("timestamp")) }, values: [NotNull(Timestamp(Timestamp(2021-01-01T13:00:00.000000003))), NotNull(Text("GOOGL")), NotNull(SmallInt(100))] } }, [TaskId("task-Pump-pu_trade_source_p1")])
[2021-11-03T04:11:46Z DEBUG springql_core::stream_engine::autonomous_executor::worker_pool::worker] [Worker#1] Scheduled task:task-Pump-pu_trade_source_p1
[2021-11-03T04:11:46Z DEBUG springql_core::stream_engine::autonomous_executor::data::row::repository] [RowRepository] collect_next(TaskId("task-Pump-pu_trade_source_p1"))
[2021-11-03T04:11:46Z DEBUG springql_core::stream_engine::autonomous_executor::data::row::repository] [RowRepository] emit(Row { arrival_rowtime: None, cols: StreamColumns { stream_shape: StreamShape { cols: [ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("timestamp"), sql_type: TimestampComparable, nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("ticker"), sql_type: StringComparableLoose(Text), nullable: false } }, ColumnDefinition { column_data_type: ColumnDataType { column: ColumnName("amount"), sql_type: NumericComparable(I64Loose(SmallInt)), nullable: false } }], promoted_rowtime: Some(ColumnName("timestamp")) }, values: [NotNull(Timestamp(Timestamp(2021-01-01T13:00:00.000000003))), NotNull(Text("GOOGL")), NotNull(SmallInt(100))] } }, [TaskId("task-SinkServerFrom-fst_trade_sink")])
[2021-11-03T04:11:46Z DEBUG springql_core::stream_engine::autonomous_executor::worker_pool::worker] [Worker#1] Scheduled task:task-SinkServerFrom-fst_trade_sink
[2021-11-03T04:11:46Z DEBUG springql_core::stream_engine::autonomous_executor::data::row::repository] [RowRepository] collect_next(TaskId("task-SinkServerFrom-fst_trade_sink"))
[2021-11-03T04:11:46Z DEBUG springql_core::stream_engine::autonomous_executor::worker_pool::worker] [Worker#1] Scheduled task:task-SourceServerTo-fst_trade_source
[2021-11-03T04:11:46Z INFO  springql_core::stream_engine::autonomous_executor::test_support::foreign::sink] [TestSink] read: {"amount":100,"ticker":"GOOGL","timestamp":"2021-01-01 13:00:00.000000003"}
    
[2021-11-03T04:11:46Z INFO  springql_core::stream_engine::autonomous_executor::test_support::foreign::sink] [TestSink] waiting for next row message...
[2021-11-03T04:11:46Z TRACE springql_core::stream_engine::autonomous_executor::worker_pool::worker] ForeignSourceTimeout { foreign_info: [foreign info.] TCP connection to 127.0.0.1:64529, source: Resource temporarily unavailable (os error 35) }
[2021-11-03T04:11:46Z DEBUG springql_core::stream_engine::autonomous_executor::worker_pool::worker] [Worker#0] Scheduled task:task-Pump-pu_trade_source_p1
[2021-11-03T04:11:46Z DEBUG springql_core::stream_engine::autonomous_executor::data::row::repository] [RowRepository] collect_next(TaskId("task-Pump-pu_trade_source_p1"))
[2021-11-03T04:11:46Z TRACE springql_core::stream_engine::autonomous_executor::worker_pool::worker] InputTimeout { task_name: "task-Pump-pu_trade_source_p1", source: next row not available }
[2021-11-03T04:11:46Z DEBUG springql_core::stream_engine::autonomous_executor::worker_pool::worker] [Worker#0] Scheduled task:task-SinkServerFrom-fst_trade_sink
[2021-11-03T04:11:46Z DEBUG springql_core::stream_engine::autonomous_executor::data::row::repository] [RowRepository] collect_next(TaskId("task-SinkServerFrom-fst_trade_sink"))
[2021-11-03T04:11:46Z TRACE springql_core::stream_engine::autonomous_executor::worker_pool::worker] InputTimeout { task_name: "task-SinkServerFrom-fst_trade_sink", source: next row not available }
[2021-11-03T04:11:46Z DEBUG springql_core::stream_engine::autonomous_executor::worker_pool::worker] [Worker#0] Scheduled task:task-SourceServerTo-fst_trade_source
[2021-11-03T04:11:46Z TRACE springql_core::stream_engine::autonomous_executor::worker_pool::worker] ForeignSourceTimeout { foreign_info: [foreign info.] TCP connection to 127.0.0.1:64529, source: Resource temporarily unavailable (os error 35) }
[2021-11-03T04:11:46Z DEBUG springql_core::stream_engine::autonomous_executor::worker_pool::worker] [Worker#1] Scheduled task:task-Pump-pu_trade_source_p1
[2021-11-03T04:11:46Z DEBUG springql_core::stream_engine::autonomous_executor::data::row::repository] [RowRepository] collect_next(TaskId("task-Pump-pu_trade_source_p1"))
[2021-11-03T04:11:46Z TRACE springql_core::stream_engine::autonomous_executor::worker_pool::worker] InputTimeout { task_name: "task-Pump-pu_trade_source_p1", source: next row not available }
[2021-11-03T04:11:46Z DEBUG springql_core::stream_engine::autonomous_executor::worker_pool::worker] [Worker#1] Scheduled task:task-SinkServerFrom-fst_trade_sink
[2021-11-03T04:11:46Z DEBUG springql_core::stream_engine::autonomous_executor::data::row::repository] [RowRepository] collect_next(TaskId("task-SinkServerFrom-fst_trade_sink"))
[2021-11-03T04:11:46Z TRACE springql_core::stream_engine::autonomous_executor::worker_pool::worker] InputTimeout { task_name: "task-SinkServerFrom-fst_trade_sink", source: next row not available }
[2021-11-03T04:11:46Z DEBUG springql_core::stream_engine::autonomous_executor::worker_pool::worker] [Worker#1] Scheduled task:task-SourceServerTo-fst_trade_source
[2021-11-03T04:11:46Z TRACE springql_core::stream_engine::autonomous_executor::worker_pool::worker] ForeignSourceTimeout { foreign_info: [foreign info.] TCP connection to 127.0.0.1:64529, source: Resource temporarily unavailable (os error 35) }
[2021-11-03T04:11:46Z DEBUG springql_core::stream_engine::autonomous_executor::worker_pool::worker] [Worker#0] Scheduled task:task-Pump-pu_trade_source_p1
[2021-11-03T04:11:46Z DEBUG springql_core::stream_engine::autonomous_executor::data::row::repository] [RowRepository] collect_next(TaskId("task-Pump-pu_trade_source_p1"))
[2021-11-03T04:11:46Z TRACE springql_core::stream_engine::autonomous_executor::worker_pool::worker] InputTimeout { task_name: "task-Pump-pu_trade_source_p1", source: next row not available }
[2021-11-03T04:11:46Z DEBUG springql_core::stream_engine::autonomous_executor::worker_pool::worker] [Worker#0] Scheduled task:task-SinkServerFrom-fst_trade_sink
[2021-11-03T04:11:46Z DEBUG springql_core::stream_engine::autonomous_executor::data::row::repository] [RowRepository] collect_next(TaskId("task-SinkServerFrom-fst_trade_sink"))
[2021-11-03T04:11:46Z TRACE springql_core::stream_engine::autonomous_executor::worker_pool::worker] InputTimeout { task_name: "task-SinkServerFrom-fst_trade_sink", source: next row not available }
[2021-11-03T04:11:46Z DEBUG springql_core::stream_engine::autonomous_executor::worker_pool::worker] [Worker#0] Scheduled task:task-SourceServerTo-fst_trade_source
[2021-11-03T04:11:46Z TRACE springql_core::stream_engine::autonomous_executor::worker_pool::worker] ForeignSourceTimeout { foreign_info: [foreign info.] TCP connection to 127.0.0.1:64529, source: Resource temporarily unavailable (os error 35) }
[2021-11-03T04:11:46Z DEBUG springql_core::stream_engine::autonomous_executor::worker_pool::worker] [Worker#1] Scheduled task:task-Pump-pu_trade_source_p1
[2021-11-03T04:11:46Z DEBUG springql_core::stream_engine::autonomous_executor::data::row::repository] [RowRepository] collect_next(TaskId("task-Pump-pu_trade_source_p1"))
[2021-11-03T04:11:46Z TRACE springql_core::stream_engine::autonomous_executor::worker_pool::worker] InputTimeout { task_name: "task-Pump-pu_trade_source_p1", source: next row not available }
[2021-11-03T04:11:46Z DEBUG springql_core::stream_engine::autonomous_executor::worker_pool::worker] [Worker#1] Scheduled task:task-SinkServerFrom-fst_trade_sink
[2021-11-03T04:11:46Z DEBUG springql_core::stream_engine::autonomous_executor::data::row::repository] [RowRepository] collect_next(TaskId("task-SinkServerFrom-fst_trade_sink"))
[2021-11-03T04:11:46Z TRACE springql_core::stream_engine::autonomous_executor::worker_pool::worker] InputTimeout { task_name: "task-SinkServerFrom-fst_trade_sink", source: next row not available }
[2021-11-03T04:11:46Z DEBUG springql_core::stream_engine::autonomous_executor::worker_pool::worker] [Worker#1] Scheduled task:task-SourceServerTo-fst_trade_source
thread 'stream_engine::tests::test_stream_engine_source_sink' panicked at 'assertion failed: `(left == right)`
  left: `JsonObject(Object({"amount": Number(30), "ticker": String("IBM"), "timestamp": String("2021-01-01 13:00:00.000000002")}))`,
 right: `JsonObject(Object({"amount": Number(20), "ticker": String("ORCL"), "timestamp": String("2021-01-01 13:00:00.000000001")}))`', src/stream_engine.rs:141:9
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
[2021-11-03T04:11:46Z TRACE springql_core::stream_engine::autonomous_executor::worker_pool::worker] ForeignSourceTimeout { foreign_info: [foreign info.] TCP connection to 127.0.0.1:64529, source: Resource temporarily unavailable (os error 35) }
[2021-11-03T04:11:46Z TRACE springql_core::stream_engine::autonomous_executor::worker_pool::worker] ForeignSourceTimeout { foreign_info: [foreign info.] TCP connection to 127.0.0.1:64529, source: Resource temporarily unavailable (os error 35) }
[2021-11-03T04:11:46Z INFO  springql_core::stream_engine::autonomous_executor::test_support::foreign::sink] [TestSink] Got EOF. Stop stream_handler.
test stream_engine::tests::test_stream_engine_source_sink ... FAILED

failures:

failures:
    stream_engine::tests::test_stream_engine_source_sink

test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 30 filtered out; finished in 1.35s

error: test failed, to rerun pass '-p springql-core --lib'
